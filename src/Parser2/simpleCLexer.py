# Generated from simpleC.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\62")
        buf.write("\u0149\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\3\2\3\2\3\2\3\2\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\13\3\13\3\f")
        buf.write("\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3")
        buf.write("\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32")
        buf.write("\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\36\3\37\3\37")
        buf.write("\3\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$")
        buf.write("\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3&\3&\3\'\3\'\7\'\u00e7")
        buf.write("\n\'\f\'\16\'\u00ea\13\'\3(\6(\u00ed\n(\r(\16(\u00ee\3")
        buf.write(")\6)\u00f2\n)\r)\16)\u00f3\3)\3)\6)\u00f8\n)\r)\16)\u00f9")
        buf.write("\3*\3*\3*\3*\3+\3+\7+\u0102\n+\f+\16+\u0105\13+\3+\3+")
        buf.write("\3,\6,\u010a\n,\r,\16,\u010b\3,\3,\5,\u0110\n,\3-\3-\3")
        buf.write("-\3-\5-\u0116\n-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u0123")
        buf.write("\n.\3/\3/\3/\3/\7/\u0129\n/\f/\16/\u012c\13/\3/\5/\u012f")
        buf.write("\n/\3/\3/\3/\3/\3\60\3\60\3\60\3\60\7\60\u0139\n\60\f")
        buf.write("\60\16\60\u013c\13\60\3\60\3\60\3\60\3\60\3\60\3\61\6")
        buf.write("\61\u0144\n\61\r\61\16\61\u0145\3\61\3\61\5\u0103\u012a")
        buf.write("\u013a\2\62\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25")
        buf.write("\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+")
        buf.write("\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E")
        buf.write("$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62\3\2\b\5\2C\\aac|")
        buf.write("\6\2\62;C\\aac|\3\2\62;\4\2C\\c|\6\2##,-//\61\61\5\2\13")
        buf.write("\f\17\17\"\"\2\u015a\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2")
        buf.write("\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2")
        buf.write("\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31")
        buf.write("\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2")
        buf.write("\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3")
        buf.write("\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2")
        buf.write("\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3")
        buf.write("\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G")
        buf.write("\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2")
        buf.write("Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2")
        buf.write("\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\3c\3\2\2")
        buf.write("\2\5g\3\2\2\2\7n\3\2\2\2\ts\3\2\2\2\13z\3\2\2\2\r|\3\2")
        buf.write("\2\2\17~\3\2\2\2\21\u0083\3\2\2\2\23\u008c\3\2\2\2\25")
        buf.write("\u008e\3\2\2\2\27\u0090\3\2\2\2\31\u0092\3\2\2\2\33\u0094")
        buf.write("\3\2\2\2\35\u0096\3\2\2\2\37\u0098\3\2\2\2!\u009a\3\2")
        buf.write("\2\2#\u009c\3\2\2\2%\u009e\3\2\2\2\'\u00a1\3\2\2\2)\u00a6")
        buf.write("\3\2\2\2+\u00ac\3\2\2\2-\u00b0\3\2\2\2/\u00b7\3\2\2\2")
        buf.write("\61\u00b9\3\2\2\2\63\u00bb\3\2\2\2\65\u00bd\3\2\2\2\67")
        buf.write("\u00bf\3\2\2\29\u00c1\3\2\2\2;\u00c3\3\2\2\2=\u00c6\3")
        buf.write("\2\2\2?\u00c9\3\2\2\2A\u00cc\3\2\2\2C\u00cf\3\2\2\2E\u00d2")
        buf.write("\3\2\2\2G\u00d5\3\2\2\2I\u00dc\3\2\2\2K\u00e2\3\2\2\2")
        buf.write("M\u00e4\3\2\2\2O\u00ec\3\2\2\2Q\u00f1\3\2\2\2S\u00fb\3")
        buf.write("\2\2\2U\u00ff\3\2\2\2W\u0109\3\2\2\2Y\u0115\3\2\2\2[\u0122")
        buf.write("\3\2\2\2]\u0124\3\2\2\2_\u0134\3\2\2\2a\u0143\3\2\2\2")
        buf.write("cd\7k\2\2de\7p\2\2ef\7v\2\2f\4\3\2\2\2gh\7f\2\2hi\7q\2")
        buf.write("\2ij\7w\2\2jk\7d\2\2kl\7n\2\2lm\7g\2\2m\6\3\2\2\2no\7")
        buf.write("e\2\2op\7j\2\2pq\7c\2\2qr\7t\2\2r\b\3\2\2\2st\7u\2\2t")
        buf.write("u\7v\2\2uv\7t\2\2vw\7k\2\2wx\7p\2\2xy\7i\2\2y\n\3\2\2")
        buf.write("\2z{\7]\2\2{\f\3\2\2\2|}\7_\2\2}\16\3\2\2\2~\177\7x\2")
        buf.write("\2\177\u0080\7q\2\2\u0080\u0081\7k\2\2\u0081\u0082\7f")
        buf.write("\2\2\u0082\20\3\2\2\2\u0083\u0084\7%\2\2\u0084\u0085\7")
        buf.write("k\2\2\u0085\u0086\7p\2\2\u0086\u0087\7e\2\2\u0087\u0088")
        buf.write("\7n\2\2\u0088\u0089\7w\2\2\u0089\u008a\7f\2\2\u008a\u008b")
        buf.write("\7g\2\2\u008b\22\3\2\2\2\u008c\u008d\7>\2\2\u008d\24\3")
        buf.write("\2\2\2\u008e\u008f\7@\2\2\u008f\26\3\2\2\2\u0090\u0091")
        buf.write("\7*\2\2\u0091\30\3\2\2\2\u0092\u0093\7+\2\2\u0093\32\3")
        buf.write("\2\2\2\u0094\u0095\7}\2\2\u0095\34\3\2\2\2\u0096\u0097")
        buf.write("\7\177\2\2\u0097\36\3\2\2\2\u0098\u0099\7.\2\2\u0099 ")
        buf.write("\3\2\2\2\u009a\u009b\7=\2\2\u009b\"\3\2\2\2\u009c\u009d")
        buf.write("\7?\2\2\u009d$\3\2\2\2\u009e\u009f\7k\2\2\u009f\u00a0")
        buf.write("\7h\2\2\u00a0&\3\2\2\2\u00a1\u00a2\7g\2\2\u00a2\u00a3")
        buf.write("\7n\2\2\u00a3\u00a4\7u\2\2\u00a4\u00a5\7g\2\2\u00a5(\3")
        buf.write("\2\2\2\u00a6\u00a7\7y\2\2\u00a7\u00a8\7j\2\2\u00a8\u00a9")
        buf.write("\7k\2\2\u00a9\u00aa\7n\2\2\u00aa\u00ab\7g\2\2\u00ab*\3")
        buf.write("\2\2\2\u00ac\u00ad\7h\2\2\u00ad\u00ae\7q\2\2\u00ae\u00af")
        buf.write("\7t\2\2\u00af,\3\2\2\2\u00b0\u00b1\7t\2\2\u00b1\u00b2")
        buf.write("\7g\2\2\u00b2\u00b3\7v\2\2\u00b3\u00b4\7w\2\2\u00b4\u00b5")
        buf.write("\7t\2\2\u00b5\u00b6\7p\2\2\u00b6.\3\2\2\2\u00b7\u00b8")
        buf.write("\7#\2\2\u00b8\60\3\2\2\2\u00b9\u00ba\7,\2\2\u00ba\62\3")
        buf.write("\2\2\2\u00bb\u00bc\7\61\2\2\u00bc\64\3\2\2\2\u00bd\u00be")
        buf.write("\7\'\2\2\u00be\66\3\2\2\2\u00bf\u00c0\7-\2\2\u00c08\3")
        buf.write("\2\2\2\u00c1\u00c2\7/\2\2\u00c2:\3\2\2\2\u00c3\u00c4\7")
        buf.write("?\2\2\u00c4\u00c5\7?\2\2\u00c5<\3\2\2\2\u00c6\u00c7\7")
        buf.write("#\2\2\u00c7\u00c8\7?\2\2\u00c8>\3\2\2\2\u00c9\u00ca\7")
        buf.write(">\2\2\u00ca\u00cb\7?\2\2\u00cb@\3\2\2\2\u00cc\u00cd\7")
        buf.write("@\2\2\u00cd\u00ce\7?\2\2\u00ceB\3\2\2\2\u00cf\u00d0\7")
        buf.write("(\2\2\u00d0\u00d1\7(\2\2\u00d1D\3\2\2\2\u00d2\u00d3\7")
        buf.write("~\2\2\u00d3\u00d4\7~\2\2\u00d4F\3\2\2\2\u00d5\u00d6\7")
        buf.write("r\2\2\u00d6\u00d7\7t\2\2\u00d7\u00d8\7k\2\2\u00d8\u00d9")
        buf.write("\7p\2\2\u00d9\u00da\7v\2\2\u00da\u00db\7h\2\2\u00dbH\3")
        buf.write("\2\2\2\u00dc\u00dd\7u\2\2\u00dd\u00de\7e\2\2\u00de\u00df")
        buf.write("\7c\2\2\u00df\u00e0\7p\2\2\u00e0\u00e1\7h\2\2\u00e1J\3")
        buf.write("\2\2\2\u00e2\u00e3\7(\2\2\u00e3L\3\2\2\2\u00e4\u00e8\t")
        buf.write("\2\2\2\u00e5\u00e7\t\3\2\2\u00e6\u00e5\3\2\2\2\u00e7\u00ea")
        buf.write("\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e9")
        buf.write("N\3\2\2\2\u00ea\u00e8\3\2\2\2\u00eb\u00ed\t\4\2\2\u00ec")
        buf.write("\u00eb\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\u00ec\3\2\2\2")
        buf.write("\u00ee\u00ef\3\2\2\2\u00efP\3\2\2\2\u00f0\u00f2\t\4\2")
        buf.write("\2\u00f1\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00f1")
        buf.write("\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5")
        buf.write("\u00f7\7\60\2\2\u00f6\u00f8\t\4\2\2\u00f7\u00f6\3\2\2")
        buf.write("\2\u00f8\u00f9\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa")
        buf.write("\3\2\2\2\u00faR\3\2\2\2\u00fb\u00fc\7)\2\2\u00fc\u00fd")
        buf.write("\13\2\2\2\u00fd\u00fe\7)\2\2\u00feT\3\2\2\2\u00ff\u0103")
        buf.write("\7$\2\2\u0100\u0102\13\2\2\2\u0101\u0100\3\2\2\2\u0102")
        buf.write("\u0105\3\2\2\2\u0103\u0104\3\2\2\2\u0103\u0101\3\2\2\2")
        buf.write("\u0104\u0106\3\2\2\2\u0105\u0103\3\2\2\2\u0106\u0107\7")
        buf.write("$\2\2\u0107V\3\2\2\2\u0108\u010a\t\5\2\2\u0109\u0108\3")
        buf.write("\2\2\2\u010a\u010b\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010c")
        buf.write("\3\2\2\2\u010c\u010f\3\2\2\2\u010d\u010e\7\60\2\2\u010e")
        buf.write("\u0110\7j\2\2\u010f\u010d\3\2\2\2\u010f\u0110\3\2\2\2")
        buf.write("\u0110X\3\2\2\2\u0111\u0112\7(\2\2\u0112\u0116\7(\2\2")
        buf.write("\u0113\u0114\7~\2\2\u0114\u0116\7~\2\2\u0115\u0111\3\2")
        buf.write("\2\2\u0115\u0113\3\2\2\2\u0116Z\3\2\2\2\u0117\u0123\t")
        buf.write("\6\2\2\u0118\u0119\7?\2\2\u0119\u0123\7?\2\2\u011a\u011b")
        buf.write("\7#\2\2\u011b\u0123\7?\2\2\u011c\u0123\7>\2\2\u011d\u011e")
        buf.write("\7>\2\2\u011e\u0123\7?\2\2\u011f\u0123\7@\2\2\u0120\u0121")
        buf.write("\7@\2\2\u0121\u0123\7?\2\2\u0122\u0117\3\2\2\2\u0122\u0118")
        buf.write("\3\2\2\2\u0122\u011a\3\2\2\2\u0122\u011c\3\2\2\2\u0122")
        buf.write("\u011d\3\2\2\2\u0122\u011f\3\2\2\2\u0122\u0120\3\2\2\2")
        buf.write("\u0123\\\3\2\2\2\u0124\u0125\7\61\2\2\u0125\u0126\7\61")
        buf.write("\2\2\u0126\u012a\3\2\2\2\u0127\u0129\13\2\2\2\u0128\u0127")
        buf.write("\3\2\2\2\u0129\u012c\3\2\2\2\u012a\u012b\3\2\2\2\u012a")
        buf.write("\u0128\3\2\2\2\u012b\u012e\3\2\2\2\u012c\u012a\3\2\2\2")
        buf.write("\u012d\u012f\7\17\2\2\u012e\u012d\3\2\2\2\u012e\u012f")
        buf.write("\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u0131\7\f\2\2\u0131")
        buf.write("\u0132\3\2\2\2\u0132\u0133\b/\2\2\u0133^\3\2\2\2\u0134")
        buf.write("\u0135\7\61\2\2\u0135\u0136\7,\2\2\u0136\u013a\3\2\2\2")
        buf.write("\u0137\u0139\13\2\2\2\u0138\u0137\3\2\2\2\u0139\u013c")
        buf.write("\3\2\2\2\u013a\u013b\3\2\2\2\u013a\u0138\3\2\2\2\u013b")
        buf.write("\u013d\3\2\2\2\u013c\u013a\3\2\2\2\u013d\u013e\7,\2\2")
        buf.write("\u013e\u013f\7\61\2\2\u013f\u0140\3\2\2\2\u0140\u0141")
        buf.write("\b\60\2\2\u0141`\3\2\2\2\u0142\u0144\t\7\2\2\u0143\u0142")
        buf.write("\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0143\3\2\2\2\u0145")
        buf.write("\u0146\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u0148\b\61\2")
        buf.write("\2\u0148b\3\2\2\2\20\2\u00e8\u00ee\u00f3\u00f9\u0103\u010b")
        buf.write("\u010f\u0115\u0122\u012a\u012e\u013a\u0145\3\b\2\2")
        return buf.getvalue()


class simpleCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    ID = 38
    INT = 39
    DOUBLE = 40
    CHAR = 41
    STRING = 42
    LIB = 43
    CONJUNCTION = 44
    OPERATOR = 45
    INLINECOMMENT = 46
    BLOCKCOMMENT = 47
    WS = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'double'", "'char'", "'string'", "'['", "']'", "'void'", 
            "'#include'", "'<'", "'>'", "'('", "')'", "'{'", "'}'", "','", 
            "';'", "'='", "'if'", "'else'", "'while'", "'for'", "'return'", 
            "'!'", "'*'", "'/'", "'%'", "'+'", "'-'", "'=='", "'!='", "'<='", 
            "'>='", "'&&'", "'||'", "'printf'", "'scanf'", "'&'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "DOUBLE", "CHAR", "STRING", "LIB", "CONJUNCTION", 
            "OPERATOR", "INLINECOMMENT", "BLOCKCOMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "ID", "INT", 
                  "DOUBLE", "CHAR", "STRING", "LIB", "CONJUNCTION", "OPERATOR", 
                  "INLINECOMMENT", "BLOCKCOMMENT", "WS" ]

    grammarFileName = "simpleC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


